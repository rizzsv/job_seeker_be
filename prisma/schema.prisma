generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  password String
  role     Role @default(SOCIETY)
  companies Company[]
  societies Society[]
  logs      Log[] @relation("UserLogs")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  phone       String
  description String

  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  positions   AvailablePosition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Society {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String
  phone         String
  date_of_birth DateTime
  gender        String

  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.ObjectId

  portfolios    Portfolio[]
  applications  PositionApplied[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  skill       String
  description String
  file        String

  society     Society @relation(fields: [societyId], references: [id])
  societyId   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AvailablePosition {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  position_name          String
  capacity               Int
  description            String
  submission_start_date  DateTime
  submission_end_date    DateTime

  company                Company  @relation(fields: [companyId], references: [id])
  companyId              String   @db.ObjectId

  applicants             PositionApplied[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PositionApplied {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  apply_date           DateTime
  status               ApplicationStatus @default(PENDING)

  society              Society           @relation(fields: [societyId], references: [id])
  societyId            String            @db.ObjectId

  available_position   AvailablePosition @relation(fields: [availablePositionId], references: [id])
  availablePositionId  String            @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LogExternal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ip        String
  target    String
  request   String
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  target    String
  request   String
  createdAt DateTime @default(now())

  user      User     @relation("UserLogs", fields: [userId], references: [id])
}

enum Role {
  HRD
  SOCIETY
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
